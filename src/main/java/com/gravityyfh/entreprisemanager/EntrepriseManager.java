package com.gravityyfh.entreprisemanager;

import net.milkbowl.vault.economy.Economy;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.YamlConfiguration; // Pas utilis√© directement ici, mais bon √† garder si besoin futur
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent; // Ajout pour les messages diff√©r√©s
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File; // Pas utilis√© directement ici

public class EntrepriseManager extends JavaPlugin implements Listener {

    private static EntrepriseManager instance;
    private EntrepriseManagerLogic entrepriseLogic;
    private ChatListener chatListener;
    private EntrepriseGUI entrepriseGUI;
    private static Economy econ = null;

    // Nouveaux Listeners (√† cr√©er si vous les s√©parez)
    private CraftItemListener craftItemListener;
    private BlockPlaceListener blockPlaceListener;


    @Override
    public void onEnable() {
        instance = this;
        getLogger().info("‚úÖ Chargement du plugin EntrepriseManager V2...");

        if (!setupEconomy()) {
            getLogger().severe("‚ùå Vault est requis pour EntrepriseManager ! D√©sactivation...");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        saveDefaultConfig(); // Assure que config.yml existe

        // Initialisation des composants principaux
        entrepriseLogic = new EntrepriseManagerLogic(this); // Contient maintenant planifierTachesHoraires()
        entrepriseGUI = new EntrepriseGUI(this, entrepriseLogic);
        chatListener = new ChatListener(this, entrepriseGUI); // Pour les saisies de montant

        // Enregistrement des listeners d'√©v√©nements
        registerEvents();
        getServer().getPluginManager().registerEvents(this, this); // Pour PlayerCommandPreprocessEvent et PlayerJoinEvent

        getLogger().info("Listener pour Towny et autres √©v√©nements enregistr√©s.");

        // Enregistrement des commandes
        setupCommands();

        // Le chargement des entreprises et la planification des t√¢ches sont maintenant g√©r√©s
        // dans le constructeur de EntrepriseManagerLogic et sa m√©thode reloadPluginData.
        // entrepriseLogic.reloadEntreprises(); // D√©j√† fait dans le constructeur et reloadPluginData
        // entrepriseLogic.planifierPaiements(); // Remplac√© par planifierTachesHoraires dans EntrepriseManagerLogic

        getLogger().info("‚úÖ Plugin EntrepriseManager V2 activ√© avec succ√®s !");
    }

    @Override
    public void onDisable() {
        if (entrepriseLogic != null) {
            entrepriseLogic.saveEntreprises(); // Sauvegarder les donn√©es avant la d√©sactivation
        }
        getLogger().info("üõë Plugin EntrepriseManager d√©sactiv√©. Donn√©es sauvegard√©es.");
    }

    private void registerEvents() {
        getServer().getPluginManager().registerEvents(chatListener, this);
        getServer().getPluginManager().registerEvents(new EventListener(this, entrepriseLogic), this); // Pour BlockBreak
        getServer().getPluginManager().registerEvents(entrepriseGUI, this);
        getServer().getPluginManager().registerEvents(new TreeCutListener(entrepriseLogic, this), this); // Ajout du plugin pour TreeCutListener
        getServer().getPluginManager().registerEvents(new TownyListener(this, entrepriseLogic), this); // Assurez-vous que TownyListener est bien enregistr√©

        // Enregistrement des nouveaux listeners s'ils existent
        // Si vous les int√©grez dans EventListener.java, ces lignes ne sont pas n√©cessaires.
        this.craftItemListener = new CraftItemListener(this, entrepriseLogic);
        getServer().getPluginManager().registerEvents(this.craftItemListener, this);
        getLogger().info("CraftItemListener enregistr√©.");

        this.blockPlaceListener = new BlockPlaceListener(this, entrepriseLogic);
        getServer().getPluginManager().registerEvents(this.blockPlaceListener, this);
        getLogger().info("BlockPlaceListener enregistr√©.");

        // Listener pour la connexion du joueur (pour les messages diff√©r√©s)
        getServer().getPluginManager().registerEvents(new PlayerConnectionListener(entrepriseLogic), this);
        getLogger().info("PlayerConnectionListener enregistr√© pour les messages diff√©r√©s.");

    }

    private void setupCommands() {
        EntrepriseCommandHandler commandHandler = new EntrepriseCommandHandler(entrepriseLogic, entrepriseGUI);
        getCommand("entreprise").setExecutor(commandHandler);
    }

    private boolean setupEconomy() {
        if (getServer().getPluginManager().getPlugin("Vault") == null) {
            getLogger().severe("Vault non trouv√© !");
            return false;
        }
        RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
        if (rsp == null) {
            getLogger().severe("Aucun fournisseur d'√©conomie Vault trouv√© !");
            return false;
        }
        econ = rsp.getProvider();
        return econ != null;
    }

    public void reloadPlugin() {
        // D'abord, recharger la configuration Bukkit standard (config.yml)
        super.reloadConfig(); // Important pour que plugin.getConfig() ait les nouvelles valeurs

        // Ensuite, appeler la m√©thode de logique qui g√®re le rechargement des donn√©es sp√©cifiques au plugin
        if (entrepriseLogic != null) {
            entrepriseLogic.reloadPluginData(); // Cette m√©thode devrait recharger entreprise.yml, players.yml et red√©marrer les t√¢ches
        }
        getLogger().info("üîÑ Plugin EntrepriseManager V2 et ses donn√©es ont √©t√© recharg√©s.");
    }

    @EventHandler
    public void onCommandPreprocess(PlayerCommandPreprocessEvent event) {
        String message = event.getMessage().toLowerCase();
        Player player = event.getPlayer();

        // Intercepter la cr√©ation de shop QuickShop
        if (message.startsWith("/qs create") || message.startsWith("/quickshop create")) {
            // V√©rifier si le joueur est g√©rant d'AU MOINS UNE entreprise
            // La logique getEntreprisesGereesPar retourne une liste. Si elle n'est pas vide, il est g√©rant.
            if (entrepriseLogic != null && entrepriseLogic.getEntreprisesGereesPar(player.getName()).isEmpty()) {
                player.sendMessage(ChatColor.RED + "‚ùå Seuls les g√©rants d'une entreprise peuvent cr√©er un shop QuickShop.");
                event.setCancelled(true);
            }
        }
    }


    // Listener interne pour la connexion des joueurs (primes diff√©r√©es)
    // Alternativement, cr√©er une classe PlayerConnectionListener s√©par√©e.
    public static class PlayerConnectionListener implements Listener {
        private final EntrepriseManagerLogic logic;

        public PlayerConnectionListener(EntrepriseManagerLogic logic) {
            this.logic = logic;
        }

        @EventHandler
        public void onPlayerJoin(PlayerJoinEvent event) {
            Player player = event.getPlayer();
            // Envoyer les messages de primes diff√©r√©es pour les employ√©s et les g√©rants
            Bukkit.getScheduler().runTaskLater(EntrepriseManager.getInstance(), () -> {
                logic.envoyerPrimesDifferreesEmployes(player);
                logic.envoyerPrimesDifferreesGerants(player);
            }, 20L * 5); // D√©lai de 5 secondes pour laisser le temps au joueur de charger
        }
    }


    public static EntrepriseManager getInstance() {
        return instance;
    }

    public EntrepriseManagerLogic getEntrepriseLogic() {
        return entrepriseLogic;
    }

    public ChatListener getChatListener() {
        return chatListener;
    }

    public static Economy getEconomy() {
        return econ;
    }
}